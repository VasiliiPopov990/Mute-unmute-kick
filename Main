import telebot
import time

bot = telebot.TeleBot('') # you need api key. You can get this at @botfather.

def is_admin(chat_id, user_id):
    user_status = bot.get_chat_member(chat_id, user_id).status
    return user_status in ['administrator', 'creator']

@bot.message_handler(commands=['mute'])
def mute_user(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "You don't have the privileges to execute this command.")
        return
    
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        
        if user_status in ['administrator', 'creator']:
            bot.reply_to(message, "It is impossible to muddy the administrator.")
        else:
            args = message.text.split()[1:]
            duration = 60
            reason = "Not specified"
            
            if args:
                try:
                    duration = int(args[0])
                    if duration < 1:
                        bot.reply_to(message, "Time should be a positive number.")
                        return
                    if duration > 1440:
                        bot.reply_to(message, "The maximum time is 1 day.")
                        return
                except ValueError:
                    bot.reply_to(message, "Incorrect time format.")
                    return
                
                if len(args) > 1:
                    reason = ' '.join(args[1:])
            
            bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration * 60)
            bot.reply_to(message, f"User {message.reply_to_message.from_user.username} mute for {duration} minutes. Reason: {reason}.")
    else:
        bot.reply_to(message, "This command should be used in response to the message of the user you want to muted.")

@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "You don't have the privileges to execute this command.")
        return
    
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        reason = "Not specified"
        
        args = message.text.split()[1:]
        if len(args) > 0:
            reason = ' '.join(args)
        
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        bot.reply_to(message, f"User {message.reply_to_message.from_user.username} unmuted. Reason: {reason}.")
    else:
        bot.reply_to(message, "This command should be used in response to the message of the user you want to unmuted.")

@bot.message_handler(commands=['kick'])
def kick_user(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "You don't have the privileges to execute this command.")
        return
    
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        
        if user_status in ['administrator', 'creator']:
            bot.reply_to(message, "It is impossible to kick the administrator.")
        else:
            reason = "Не указана"
            
            args = message.text.split()[1:]
            if len(args) > 0:
                reason = ' '.join(args)
            
            bot.kick_chat_member(chat_id, user_id)
            bot.reply_to(message, f"User {message.reply_to_message.from_user.username} was kicked. Reason: {reason}.")
    else:
        bot.reply_to(message, "This command should be used in response to the message of the user you want to kick.")

@bot.message_handler(commands=['clear'])
def clear_chat(message):
    if not is_admin(message.chat.id, message.from_user.id):
        bot.reply_to(message, "You don't have the privileges to execute this command.")
        return
    
    chat_id = message.chat.id
    try:
        for d in range(10000):
            bot.delete_message(chat_id, message.message_id - d)
    except Exception as e:
        bot.reply_to(message, f"Error when deleting messages: {e}")

keep_alive()
bot.polling(non_stop=True)
